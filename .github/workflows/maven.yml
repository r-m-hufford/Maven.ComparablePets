# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    #- name: Test
      #run: java -cp path to test suite
      
    
      # TESTING AGAINST DIFFERENT PLATFORMS
    jobs:
      build:
        runs-on: ${{ matrix.os }}
        strategy:
          matrix:
            java: [ '8', '11' ]
            os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
        name: Java ${{ matrix.Java }} (${{ matrix.os }}) sample
        steps:
          - uses: actions/checkout@v2
          - name: Setup java
            uses: actions/setup-java@v2
            with:
              distribution: 'adopt'
              java-version: ${{ matrix.java }}
          - run: java -cp java HelloWorldApp
      
      
      #CACHING DEPENDENCIES
          steps:
          - uses: actions/checkout@v2
          - name: Set up JDK 11
            uses: actions/setup-java@v2
            with:
              java-version: '11'
              distribution: 'adopt'
          - name: Cache Maven packages
            uses: actions/cache@v2
            with:
              path: ~/.m2
              key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
              restore-keys: ${{ runner.os }}-m2
          - name: Build with Maven
            run: mvn --batch-mode --update-snapshots verify

    # PACKAGING WORKFLOW DATA
    
  steps:
  - uses: actions/checkout@v2
  - uses: actions/setup-java@v2
    with:
      java-version: '11'
      distribution: 'adopt'
  - run: mvn --batch-mode --update-snapshots verify
  - run: mkdir staging && cp target/*.jar staging
  - uses: actions/upload-artifact@v2
    with:
      name: Package
      path: staging
    
    # AUTOMATED PUBLISHING      
  
      - name: Publish to GitHub Packages Apache Maven
        run: mvn deploy
        env:
          GITHUB_TOKEN: ${{ github.token }} # GITHUB_TOKEN is the default env for the password

      - name: Set up Apache Maven Central
        uses: actions/setup-java@v2
        with: # running setup-java again overwrites the settings.xml
          distribution: 'adopt'
          java-version: '11'
          server-id: maven # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Publish to Apache Maven Central
        run: mvn deploy
        env:
          MAVEN_USERNAME: maven_username123
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }} 
